
import java.sql.*;

public class Datenbank {
public class DBController {
	private static final DBController dbcontroller = new DBController();
    private static Connection connection;
    private static final String DB_PATH = System.getProperty("user.home") + "/" + "Booklink.db";

    static {
        try {
            Class.forName("org.sqlite.JDBC");
        } catch (ClassNotFoundException e) {
            System.err.println("Fehler beim Laden des JDBC-Treibers");
            e.printStackTrace();
        }
    }
    
    private DBController(){
    }
    
    public static DBController getInstance(){
        return dbcontroller;
    }
    
    private void initDBConnection() {
        try {
            if (connection != null)
                return;
            System.out.println("Creating Connection to Database...");
            connection = DriverManager.getConnection("jdbc:sqlite:" + DB_PATH);
            if (!connection.isClosed())
                System.out.println("...Connection established");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        Runtime.getRuntime().addShutdownHook(new Thread() {
            public void run() {
                try {
                    if (connection.isClosed() && connection != null) {
                        connection.close();
                        if (connection.isClosed())
                            System.out.println("Connection to Database closed");
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    private void handleDB(String autor, String titel, String erscheinungsjahr,int iban) {
        try {
            Statement stmt = connection.createStatement();
            
           
           // stmt.executeUpdate("CREATE TABLE IF NOT EXISTS books;");
           stmt.executeUpdate("CREATE TABLE IF NOT EXISTS books (Autor, Titel, Veröffentlichung, IBAN);");
           // stmt.execute("INSERT INTO books (author, title, publication, pages) VALUES ('Paul', 'ppp ', '2001-05-06', '1234')");
            
            PreparedStatement ps = connection
                    .prepareStatement("INSERT INTO books VALUES (?, ?, ?, ?);");

            ps.setString(1, autor);
            ps.setString(2, titel);
            ps.setDate(3, Date.valueOf(erscheinungsjahr));
            ps.setInt(4, iban);
            ps.addBatch();
            
            //PreparedStatement ps2 = connection
                    //.prepareStatement("Select From book where ;");
            
            //ps.setString(1, "Anton Antonius");
           // ps.setString(2, "Anton's Alarm");
            //ps.setDate(3, Date.valueOf("2009-10-01"));
           // ps.setInt(4, 123);
           // ps.addBatch();

           // ResultSet rsneu;		Return werte
          /// ps2.setString(1,"Anton");
           // rsneu.
            
            
            connection.setAutoCommit(false);
            ps.executeBatch();
            connection.setAutoCommit(true);

            ResultSet rs = stmt.executeQuery("SELECT * FROM books;");
            while (rs.next()) {
                System.out.println("Autor = " + rs.getString("Autor"));
                System.out.println("Titel = " + rs.getString("Titel"));
                System.out.println("Erscheinungsdatum = "
                        + rs.getDate("Veröffentlichung"));
                System.out.println("IBAN = " + rs.getInt("IBAN"));
            }
            rs.close();
            connection.close();
        } catch (SQLException e) {
            System.err.println("Couldn't handle DB-Query");
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        DBController dbc = DBController.getInstance();
        dbc.initDBConnection();
        dbc.handleDB("Basti","Testbuch","2014-01-03",123456789);
    } 
}
