
import java.sql.*;

//
// Verwendung der Datenbank erfolgt nach folgendem Schema:
// Methoden:
//	schreibeDB: Buch in Datenbank schreiben
//	loescheDB: Buch aus Datenbank entfernen
//	ausgabeDB: Ausgabe der Bücher aus der Datenbank
//	exit: Verbindung mit Datenbank trennen
//	initDBConnection: Verbindung mit Datenbank herstellen
//
// Beispiel:
//		DBController dbc = DBController.getInstance();				//Instanz holen
//		dbc.initDBConnection();							//Verbindung herstellen
//		dbc.schreibeDB("Basti", "Testbuch", "2014-01-03", 123456789,		//Methodenaufruf
//				"Springer", 3, "5 Wochen");	
//		dbc.exit();								//Verbindung trennen
//		DBController dbc2 = DBController.getInstance();
//		dbc2.initDBConnection();
//		dbc2.schreibeDB("Basti3", "Testbuch3", "2012-01-03", 11111112,"Springer", 2, "5 Wochen");
//		dbc2.exit();
//
//
// Für jeden Methodenaufruf sollte eine neue Verbindung hergestellt werden und die vorherige geschlossen werden !!!


public class DBController {
	private static final DBController dbcontroller = new DBController();
	public static Connection connection;
	private static final String DB_PATH = System.getProperty("user.home") + "/"
			+ "Booklink.db";

	static {
		try {
			Class.forName("org.sqlite.JDBC");
		} catch (ClassNotFoundException fehler) {
			System.err.println("Fehler beim Laden des JDBC-Treibers");
			fehler.printStackTrace();
		}
	}

	private DBController() {
	}

	public static DBController getInstance() {
		return dbcontroller;
	}

	public boolean initDBConnection() { 
		try {
			if (connection != null)
				{return false;}
			System.out.println("Verbindung zu Datenbank wird hergestellt...");
			connection = DriverManager.getConnection("jdbc:sqlite:" + DB_PATH);
			if (!connection.isClosed())
			{
				System.out.println("...Verbindung hergestellt");
				return true;
			}
			} catch (SQLException fehler) {
			throw new RuntimeException(fehler);
		}
		return false;
	}

	public void schreibeDB(String autor,
			String titel, 
			String erscheinungsjahr, int isbn, String verlag, int auflage,
			String leihfrist) {
		try {
			Statement erstelleDatenbank = connection.createStatement();
			erstelleDatenbank.executeUpdate("CREATE TABLE IF NOT EXISTS books (Autor, Titel, Veröffentlichung, ISBN,  Verlag, Auflage, Leihfrist);");
			PreparedStatement schreibeEinträge = connection
					.prepareStatement("INSERT INTO books VALUES (?, ?, ?, ?, ?, ?, ?);");

			boolean vorhanden = false;
			PreparedStatement isbnSuche = connection
					.prepareStatement("select Titel from books where ISBN = ?");
			isbnSuche.setInt(1, isbn);
			ResultSet Suchresultate = isbnSuche.executeQuery();
			while (Suchresultate.next()) {
				System.out.println(Suchresultate.getString(1));
				if (Suchresultate.getString(1) != null) {
					vorhanden = true;
				}
			}
			Suchresultate.close();
			isbnSuche.close();

			if (vorhanden != true) {
				schreibeEinträge.setString(1, autor);
				schreibeEinträge.setString(2, titel);
				schreibeEinträge.setDate(3, Date.valueOf(erscheinungsjahr));
				schreibeEinträge.setInt(4, isbn);
				schreibeEinträge.setString(5, verlag);
				schreibeEinträge.setInt(6, auflage);
				schreibeEinträge.setString(7, leihfrist);
				schreibeEinträge.addBatch();
			}

			if (vorhanden == true) {
				System.out.println("Das Buch ist schon vorhanden");
			}

			connection.setAutoCommit(false);
			schreibeEinträge.executeBatch();
			connection.setAutoCommit(true);
			
		} catch (SQLException fehler) {
			System.err.println("Fehler bei Datenbank-Abfrage");
			fehler.printStackTrace();
		}
	}

	public void ausgabeDB() { 
		try {
			Statement stmt = connection.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM books;");
			while (rs.next()) {
				System.out.println("Autor = " + rs.getString("Autor"));
				System.out.println("Titel = " + rs.getString("Titel"));
				System.out.println("Erscheinungsdatum = "
						+ rs.getDate("Veröffentlichung"));
				System.out.println("ISBN = " + rs.getInt("ISBN"));
				System.out.println("Verlag = " + rs.getString("Verlag"));
				System.out.println("Auflage = " + rs.getInt("Auflage"));
				System.out.println("Leihfrist = " + rs.getString("Leihfrist"));
			}

			rs.close();
			stmt.close();
		} catch (SQLException fehler) {
			System.err.println("Fehler bei Ausgabe");
			fehler.printStackTrace();
		}
	}
	
	public void exit() throws SQLException
	{
		connection.close();
		connection = null;	
		
	}

	public void loescheBuch(int isbn) { 
		String query = "delete from books where ISBN=" + isbn;
		try {
			Statement stmt5 = connection.createStatement();
			stmt5.execute(query);
			System.out.println("Das Buch mit der ISBN = " + isbn
					+ " wurde gelöscht!");
			stmt5.close();
		} catch (SQLException fehler) {
			System.err.println("Fehler beim Löschen");
			fehler.printStackTrace();
		}
	}
	
}
