
import java.sql.*;

public class DBController {
	private static final DBController dbcontroller = new DBController();
	private static Connection connection;
	private static final String DB_PATH = System.getProperty("user.home") + "/"
			+ "Booklink.db";

	static {
		try {
			Class.forName("org.sqlite.JDBC");
		} catch (ClassNotFoundException e) {
			System.err.println("Fehler beim Laden des JDBC-Treibers");
			e.printStackTrace();
		}
	}

	private DBController() {
	}

	public static DBController getInstance() {
		return dbcontroller;
	}

	private void initDBConnection() {
		try {
			if (connection != null)
				return;
			System.out.println("Verbindung zu Datenbank wird hergestellt...");
			connection = DriverManager.getConnection("jdbc:sqlite:" + DB_PATH);
			if (!connection.isClosed())
				System.out.println("...Verbindung hergestellt");
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}

		Runtime.getRuntime().addShutdownHook(new Thread() {
			public void run() {
				try {
					if (connection.isClosed() && connection != null) {
						connection.close();
						if (connection.isClosed())
							System.out.println("Verbindung mit Datenbank geschlossen!");
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		});
	}

	private void schreibeDB(String autor, String titel,
			String erscheinungsjahr, int iban, String verlag, int auflage,
			String leihfrist) {
		try {
			Statement stmt = connection.createStatement();
			stmt.executeUpdate("CREATE TABLE IF NOT EXISTS books (Autor, Titel, Veröffentlichung, IBAN,  Verlag, Auflage, Leihfrist);");
			PreparedStatement ps = connection.prepareStatement("INSERT INTO books VALUES (?, ?, ?, ?, ?, ?, ?);");

			boolean vorhanden = false;
			PreparedStatement st2 = connection.prepareStatement("select Titel from books where IBAN = ?");
			st2.setInt(1, iban);
			ResultSet rs3 = st2.executeQuery();
			while (rs3.next()) {
				System.out.println(rs3.getString(1));
				if (rs3.getString(1) != null) {
					vorhanden = true;
				}
			}
			rs3.close();
			st2.close();

			if (vorhanden != true) {
				ps.setString(1, autor);
				ps.setString(2, titel);
				ps.setDate(3, Date.valueOf(erscheinungsjahr));
				ps.setInt(4, iban);
				ps.setString(5, verlag);
				ps.setInt(6, auflage);
				ps.setString(7, leihfrist);
				ps.addBatch();
			}

			if (vorhanden == true) {
				System.out.println("Das Buch ist schon vorhanden");
			}

			connection.setAutoCommit(false);
			ps.executeBatch();
			connection.setAutoCommit(true);
			connection.close();
		} catch (SQLException e) {
			System.err.println("Fehler bei Datenbank-Abfrage");
			e.printStackTrace();
		}
	}

	public void ausgabeDB() {
		try {
			Statement stmt = connection.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM books;");
			while (rs.next()) {
				System.out.println("Autor = " + rs.getString("Autor"));
				System.out.println("Titel = " + rs.getString("Titel"));
				System.out.println("Erscheinungsdatum = "
						+ rs.getDate("Veröffentlichung"));
				System.out.println("IBAN = " + rs.getInt("IBAN"));
				System.out.println("Verlag = " + rs.getString("Verlag"));
				System.out.println("Auflage = " + rs.getInt("Auflage"));
				System.out.println("Leihfrist = " + rs.getString("Leihfrist"));
			}

			rs.close();
			connection.close();
		} catch (SQLException e) {
			System.err.println("Fehler bei Ausgabe");
			e.printStackTrace();
		}
	}

	private void loescheBuch(int iban) {
		String query = "delete from books where iban=" + iban;
		try {
			Statement stmt5 = connection.createStatement();
			stmt5.execute(query);
			System.out.println("Das Buch mit der iban = " + iban + " wurde gelöscht!");
			connection.close();
		} catch (SQLException e) {
			System.err.println("Fehler beim Löschen");
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		DBController dbc = DBController.getInstance();
		dbc.initDBConnection();
		dbc.schreibeDB("Basti", "Testbuch", "2014-01-03", 123456789,"Springer", 3, "5 Wochen");
		DBController dbc2 = DBController.getInstance();
		dbc2.initDBConnection();
		dbc2.schreibeDB("Basti3", "Testbuch3", "2012-01-03", 11111112,"Springer", 2, "5 Wochen");
		DBController dbc3 = DBController.getInstance();
		dbc3.initDBConnection();
		dbc3.loescheBuch(11111112);
		DBController dbc4 = DBController.getInstance();
		dbc4.initDBConnection();
		dbc4.ausgabeDB();
	}
}
